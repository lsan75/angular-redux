/// <reference path="../typings/node/node.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ts = require('typescript');
var path = require('path');
var fs = require('fs');
var baseDir_1 = require('./baseDir');
var traced_1 = require('./util/traced');
var trace_1 = require('./util/trace');
var LanguageServiceHost = (function () {
    function LanguageServiceHost() {
        this.projectVersion = 0;
    }
    LanguageServiceHost.prototype.setCompilationRequest = function (request, dependencies) {
        if (!Object.isFrozen(request)) {
            throw new TypeError('request should be frozen');
        }
        if (!Object.isFrozen(request.options)) {
            throw new TypeError('request.options should be frozen');
        }
        this.request = request;
        this.dependencies = dependencies;
        this.projectVersion++;
    };
    LanguageServiceHost.prototype.getProjectVersion = function () {
        return this.projectVersion.toString();
    };
    LanguageServiceHost.prototype.getCompilationSettings = function () {
        return this.request.options;
    };
    LanguageServiceHost.prototype.getCurrentDirectory = function () {
        return baseDir_1.default;
    };
    LanguageServiceHost.prototype.getScriptFileNames = function () {
        return [path.relative(baseDir_1.default, this.request.inputFileName)];
    };
    LanguageServiceHost.prototype.getScriptSnapshot = function (fileName) {
        var filePath = path.resolve(baseDir_1.default, fileName);
        // Add to dependencies every path that TypeScript tries,
        // even if the file does not exist, because it may become available later
        this.dependencies.add(filePath);
        var source;
        if (this.request.isInputFile(filePath)) {
            trace_1.default('Using input');
            source = this.request.input;
        }
        else {
            try {
                trace_1.default('Reading file: ' + filePath);
                source = fs.readFileSync(filePath, 'utf8');
            }
            catch (err) {
                trace_1.default('Failed to read file');
                return void 0;
            }
        }
        return ts.ScriptSnapshot.fromString(source);
    };
    LanguageServiceHost.prototype.getScriptVersion = function (fileName) {
        var filePath = path.resolve(baseDir_1.default, fileName);
        // Add to dependencies every path that TypeScript tries,
        // even if the file does not exist, because it may become available later
        this.dependencies.add(filePath);
        try {
            return fs.statSync(filePath).mtime.toISOString();
        }
        catch (err) {
            return void 0;
        }
    };
    LanguageServiceHost.prototype.getDefaultLibFileName = function () {
        return path.resolve(path.dirname(ts.sys.getExecutingFilePath()), ts.getDefaultLibFileName(this.request.options)); // HACK: ts understands absolute path only
    };
    LanguageServiceHost.prototype.getNewLine = function () {
        return this.request.newLine;
    };
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "setCompilationRequest", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getProjectVersion", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getCompilationSettings", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getCurrentDirectory", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getScriptFileNames", null);
    __decorate([
        traced_1.tracedMethod({ return: false })
    ], LanguageServiceHost.prototype, "getScriptSnapshot", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getScriptVersion", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getDefaultLibFileName", null);
    __decorate([
        traced_1.tracedMethod()
    ], LanguageServiceHost.prototype, "getNewLine", null);
    return LanguageServiceHost;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LanguageServiceHost;
