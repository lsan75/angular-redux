/// <reference path="../typings/node/node.d.ts" />
var ts = require('typescript');
var path = require('path');
var OptionsBuilder = (function () {
    function OptionsBuilder(diagnostics) {
        this.diagnostics = diagnostics;
        this.options = {};
    }
    OptionsBuilder.prototype.addConfigFileText = function (filePath, content) {
        var result = (ts.parseConfigFileText || ts.parseConfigFileTextToJson)(filePath, content);
        if (result.error) {
            this.diagnostics.add([result.error]);
        }
        else {
            this.addConfig(result.config, path.dirname(filePath));
        }
        return this;
    };
    OptionsBuilder.prototype.addConfig = function (config, basePath) {
        var options = parseOptions.call(this);
        if (options) {
            addOptions.call(this);
        }
        return this;
        function parseOptions() {
            config.files = [];
            var result = (ts.parseConfigFile || ts.parseJsonConfigFileContent)(config, ts.sys, basePath);
            if (result.errors.length > 0) {
                this.diagnostics.add(result.errors);
                return null;
            }
            else {
                return result.options;
            }
        }
        function addOptions() {
            for (var key in options) {
                if (options.hasOwnProperty(key)) {
                    this.options[key] = options[key];
                }
            }
        }
    };
    OptionsBuilder.prototype.build = function (sourceMap) {
        var options = this.options;
        this.options = {};
        adjustOptions();
        return Object.freeze(options);
        function adjustOptions() {
            delete options.out;
            delete options.outFile;
            delete options.declaration;
            delete options.emitBOM;
            if (sourceMap) {
                if (options.inlineSourceMap) {
                    delete options.inlineSourceMap;
                    options.sourceMap = true;
                }
                if (typeof options.sourceMap === 'undefined') {
                    options.sourceMap = true;
                }
                if (options.sourceMap) {
                    options.inlineSources = true;
                }
            }
            else {
                delete options.sourceMap;
                delete options.inlineSourceMap;
                delete options.inlineSources;
            }
        }
    };
    return OptionsBuilder;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OptionsBuilder;
